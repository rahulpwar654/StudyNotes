OOPs Concepts

1.Object
2.Class
3.Inheritance
4.Polymorphism
5.Abstraction
6.Encapsulation

Object

Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.


Class
Collection of objects is called class. It is a logical entity

Inheritance
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance.
 It provides code reusability. It is used to achieve runtime polymorphism.
 
 
 
 
Polymorphism
If one task is performed in different ways, it is known as polymorphism. 
For example: to convince the customer differently, to draw something, for example, shape, triangle, rectangle, etc.
In Java, we use method overloading and method overriding to achieve polymorphism.

### ‚öñÔ∏è Overloading vs Overriding

| Feature               | Overloading                          | Overriding                          |
|----------------------|--------------------------------------|-------------------------------------|
| **Polymorphism Type**| Compile-time                         | Runtime                             |
| **Class Relationship**| Same class or subclass               | Requires inheritance                |
| **Method Signature** | Must differ                          | Must match                          |
| **Return Type**      | Can differ                           | Must be same or covariant           |
| **Access Modifier**  | Can vary                             | Must be same or more accessible     |
| **Static Methods**   | Can be overloaded                    | Cannot be overridden                |

---
### üìú Core Rules of Method Overriding

| Rule | Description |
|------|-------------|
| **Same Method Signature** | The method name, return type, and parameter list must match exactly with the superclass method. |
| **Inheritance Required** | Overriding only occurs between a subclass and its superclass. |
| **Access Modifier** | The overriding method **cannot be more restrictive** than the method in the superclass. For example, if the superclass method is `protected`, the subclass method cannot be `private`. |
| **Return Type** | Must be the same or a **covariant type** (i.e., a subclass of the original return type). |
| **Cannot Override Static Methods** | Static methods belong to the class, not the instance, so they can't be overridden‚Äîonly hidden. |
| **Cannot Override Final Methods** | Methods declared `final` in the superclass cannot be overridden. |
| **Cannot Override Constructors** | Constructors are not inherited, so they can't be overridden. |
| **Use of @Override Annotation** | Optional but recommended‚Äîit helps catch errors at compile time if the method signature doesn‚Äôt match. |

---

Abstraction
Hiding internal details and showing functionality is known as abstraction. 
For example phone call, we don't know the internal processing.
In Java, we use abstract class and interface to achieve abstraction.


Encapsulation
Binding (or wrapping) code and data together into a single unit are known as encapsulation. 
For example, a capsule, it is wrapped with different medicines.
A java class is the example of encapsulation. Java bean is the fully encapsulated class because all the data members are private here.



