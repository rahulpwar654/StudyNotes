In Spring Boot, you can configure your application using a YAML (YAML Ain't Markup Language) file instead of a traditional properties file. YAML is a human-readable data serialization format that is commonly used for configuration files.

To define properties in a YAML file for your Spring Boot application, you typically create a file named `application.yml` or `application.yaml` in your application's `src/main/resources` directory. Here's an example of how you can define properties in a YAML file:

########################################################


```yaml
server:
  port: 8080

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/mydb
    username: root
    password: password
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
  profiles:
    active: dev
	
```


###########################################################

In this example, we have defined several properties under different sections:

- The `server` section configures the embedded web server and sets the port to `8080`.
- The `spring.datasource` section configures the database connection with the URL, username, and password.
- The `spring.jpa` section configures the JPA settings, such as showing SQL queries and specifying the Hibernate dialect and behavior.
- The `spring.profiles` section sets the active profile to `dev`.

You can define nested properties using indentation, as shown in the example. Be mindful of the spacing and indentation, as YAML relies on proper indentation for defining the hierarchy of properties.

Once you have defined your properties in the YAML file, Spring Boot will automatically load them and make them available for your application. You can access these properties using the `@Value` annotation or by injecting the `Environment` bean in your application code.

Note that you can still use a traditional `application.properties` file if you prefer that format. In that case, you would define your properties in a key-value format instead of using YAML syntax.


#####################################

Two DAta sources

spring:
  datasource:
    todos:
      url: ...
      username: ...
      password: ...
      driverClassName: ...
    topics:
      url: ...
      username: ...
      password: ...
      driverClassName: 
	  
2Then we can create the data sources by using the DataSourceProperties objects:

@Bean
public DataSource todosDataSource() {
    return todosDataSourceProperties()
      .initializeDataSourceBuilder()
      .build();
}

@Bean
public DataSource topicsDataSource() {
    return topicsDataSourceProperties()
      .initializeDataSourceBuilder()
      .build();
}

3)When using Spring Data JDBC, we also need to configure one instance of JdbcTemplate for each DataSource:
@Bean
public JdbcTemplate todosJdbcTemplate(@Qualifier("todosDataSource") DataSource dataSource) {
    return new JdbcTemplate(dataSource);
}

@Bean
public JdbcTemplate topicsJdbcTemplate(@Qualifier("topicsDataSource") DataSource dataSource) {
    return new JdbcTemplate(dataSource);
}