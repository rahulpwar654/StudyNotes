
Rest Api methods 



######################################################################

GET method:

The GET method is used to retrieve data from the server. 
This is a read-only method, so it has no risk of mutating or corrupting the data. 
For example, if we call the get method on our API, weâ€™ll get back a list of all to-dos.
 
 @GetMapping("/employees")
  List<Employee> all() {
    return repository.findAll();
  }
  
   @GetMapping("/{id}")
 Employee getEmployeeById(@Pathvariable String id) {
    return repository.find(id);
  }



######################################################################


POST method:

The POST method sends data to the server and creates a new resource. 
The resource it creates is subordinate to some other parent resource. 
When a new resource is POSTed to the parent, the API service will automatically associate the new resource 
by assigning it an ID (new resource URI). In short, this method is used to create a new data entry.


@PostMapping("/employees")
  Employee newEmployee(@RequestBody Employee newEmployee) {
    return repository.save(newEmployee);
  }


######################################################################
PUT method:
The PUT method is most often used to update an existing resource. 
If you want to update a specific resource (which comes with a specific URI), 
you can call the PUT method to that resource URI with the request body containing the complete new version 
of the resource you are trying to update.

@PutMapping("/employees/{id}")
  Employee replaceEmployee(@RequestBody Employee newEmployee, @PathVariable Long id) {
    
    return repository.findById(id)
      .map(employee -> {
        employee.setName(newEmployee.getName());
        employee.setRole(newEmployee.getRole());
        return repository.save(employee);
      })
      .orElseGet(() -> {
        newEmployee.setId(id);
        return repository.save(newEmployee);
      });
  }




When a client needs to replace an existing Resource entirely, they can use PUT. When they're doing a partial update, they can use HTTP PATCH.

######################################################################
PATCH method:
The PATCH method is very similar to the PUT method because it also modifies an existing resource. 
The difference is that for the PUT method, the request body contains the complete new version, 
whereas for the PATCH method, the request body only needs to contain the specific changes to the resource, 
specifically a set of instructions describing how that resource should be changed, 
and the API service will create a new version according to that instruction.

@PatchMapping("{id}/complete")
    public ResponseEntity<TodoDto> completeTodo(@PathVariable("id") Long todoId){
        TodoDto updatedTodo = todoService.completeTodo(todoId);
        return ResponseEntity.ok(updatedTodo);
    }



######################################################################

DELETE method:

The DELETE method is used to delete a resource specified by its URI.


  @DeleteMapping("/employees/{id}")
  void deleteEmployee(@PathVariable Long id) {
    repository.deleteById(id);
  }

#####################################################################





Fetch API comes with a fetch () method that allows you to fetch data from all sorts of different 
places and work with the data fetched. It allows you to make an HTTP request, 
i.e., either a GET request (for getting data) or POST request (for posting data).


