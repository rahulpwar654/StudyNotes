Docker

Absolutely! Let’s break this down into two parts: **what Docker is**, and **how to create a Docker image for a Spring Boot JAR**.

---

### 🐳 What Is Docker?

**Docker** is a platform that allows you to package applications and their dependencies into **containers**—lightweight, portable units that run consistently across environments.

#### 🔧 Key Benefits:
- **Isolation**: Each container runs independently, avoiding conflicts.
- **Portability**: Runs the same on dev, test, and prod.
- **Efficiency**: Uses fewer resources than traditional VMs.
- **Scalability**: Easily deployable across cloud-native platforms like Kubernetes.

Think of Docker as a shipping container for your code—it wraps everything needed to run your app and ships it anywhere.

---

### 🚀 Create a Docker Image for a Spring Boot JAR

Let’s say you’ve built your Spring Boot app and have a JAR file named `app.jar` in the `target/` directory.

#### ✅ Step 1: Create a `Dockerfile`

```dockerfile
# Use a lightweight Java base image
FROM openjdk:17-jdk-alpine

# Set the maintainer (optional)
LABEL maintainer="yourname@example.com"

# Copy the JAR file into the container
COPY target/app.jar app.jar

# Run the JAR file
ENTRYPOINT ["java", "-jar", "/app.jar"]
```

#### ✅ Step 2: Build the Docker Image

Run this command in the same directory as your `Dockerfile`:

```bash
docker build -t springboot-app .
```

This creates an image named `springboot-app`.

#### ✅ Step 3: Run the Container

```bash
docker run -p 8080:8080 springboot-app
```

This maps port `8080` on your machine to the container’s port `8080`, so you can access your app at `http://localhost:8080`.

---

### 🧠 Pro Tips

- Use **multi-stage builds** for smaller image sizes.
- Store secrets outside the image (e.g., environment variables).
- Use **Docker Compose** if your app depends on other services like databases.

You can find a full walkthrough on [GeeksforGeeks](https://www.geeksforgeeks.org/java/dockerizing-spring-boot-apps/) and [Baeldung’s guide](https://www.baeldung.com/dockerizing-spring-boot-application).

Want help adding a database or building a multi-container setup with Docker Compose? Let's level it up.


Here’s a handy list of essential **Docker commands** to help you build, run, manage, and inspect containers and images. These are grouped by category for clarity:

---

### 🛠️ Image Management

| Command | Description |
|--------|-------------|
| `docker build -t <image_name> .` | Build an image from a Dockerfile |
| `docker images` | List all local Docker images |
| `docker rmi <image_name>` | Remove an image |
| `docker pull <image_name>` | Download an image from Docker Hub |
| `docker push <username>/<image_name>` | Upload an image to Docker Hub |

---

### 🚀 Container Lifecycle

| Command | Description |
|--------|-------------|
| `docker run <image_name>` | Run a container from an image |
| `docker run -d <image_name>` | Run container in background (detached mode) |
| `docker run -p 8080:8080 <image_name>` | Map container port to host port |
| `docker ps` | List running containers |
| `docker ps -a` | List all containers (including stopped) |
| `docker stop <container_id>` | Stop a running container |
| `docker start <container_id>` | Start a stopped container |
| `docker rm <container_id>` | Remove a stopped container |

---

### 🔍 Inspection & Debugging

| Command | Description |
|--------|-------------|
| `docker logs <container_id>` | View container logs |
| `docker exec -it <container_id> sh` | Open shell inside running container |
| `docker inspect <container_id>` | View detailed container info |
| `docker stats` | Show resource usage of containers |

---

### 🧹 Cleanup

| Command | Description |
|--------|-------------|
| `docker image prune` | Remove unused images |
| `docker container prune` | Remove stopped containers |
| `docker system prune` | Clean up unused data (images, containers, volumes, networks) |

---

For a printable reference, check out Docker’s official [CLI Cheat Sheet PDF](https://docs.docker.com/get-started/docker_cheatsheet.pdf) or explore a full command breakdown on [GeeksforGeeks](https://www.geeksforgeeks.org/devops/docker-instruction-commands/).

Want help scripting these into a workflow or using Docker Compose for multi-container setups? I’ve got you covered.
